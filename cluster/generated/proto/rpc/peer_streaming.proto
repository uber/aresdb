//  Copyright (c) 2017-2018 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package rpc;

message VectorPartyMetaData {
    uint32 column_id = 1; // column id
}

message BatchMetaDataRequest {
    string table = 1; // table name
    uint32 shard = 2; // shard id
    int32 start_batch_id = 3; // first batch id to fetch
    int32 end_batch_id = 4; // last batch id to fetch
}

message BatchMetaData {
    string  table = 1; // table name
    uint32  shard = 2; // shard id
    int32   batch_id = 3; // batch id
    uint32  num_columns = 4; // num columns
    uint32  num_rows = 5; // num rows
    uint32  cutoff = 6; // archiving cutoff
    uint32  seq = 7; // backfill seq
    repeated VectorPartyMetaData vps = 8; // vector parties
}

message VectorPartyRawDataRequest {
    string table = 1;
    uint32 shard = 2;
    int32  batch_id = 3;
    uint32 cutoff = 4;
    uint32 seq = 5;
    uint32 column_id = 6;
}

message VectorPartyRawData {
    bytes chunk = 1;
}

message LeaseGrantRequest {
    string table = 1;
    uint32 shard = 2;
    int64 ttl = 3;
}

message LeaseGrantResponse {
    int64 ID = 1;
}

message LeaseRenewRequest {
    int64 ID = 1;
    int64 ttl = 2;
}

message LeaseRenewResponse {
    int64 ID = 1;
    int64 ttl = 2;
}

message LeaseRevokeRequest {
    int64 ID = 1;
}

message LeaseRevokeResponse {
    int64 ID = 1;
}

service PeerDataNode {
    rpc Grant(LeaseGrantRequest ) returns (LeaseGrantResponse ) {}
    rpc Renew(stream LeaseRenewRequest ) returns (stream LeaseRenewResponse ) {}
    rpc Revoke(LeaseRevokeRequest ) returns (LeaseRevokeResponse ) {}
    rpc FetchBatchMetaData(BatchMetaDataRequest ) returns (BatchMetaData ) {}
    rpc FetchBatchDataRaw(VectorPartyRawDataRequest ) returns (stream VectorPartyRawData) {}
}
