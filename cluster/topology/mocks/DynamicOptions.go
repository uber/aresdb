// Code generated by mockery v1.0.0
package mocks

import client "github.com/m3db/m3/src/cluster/client"
import mock "github.com/stretchr/testify/mock"
import services "github.com/m3db/m3/src/cluster/services"
import topology "github.com/uber/aresdb/cluster/topology"
import utils "github.com/uber/aresdb/utils"

// DynamicOptions is an autogenerated mock type for the DynamicOptions type
type DynamicOptions struct {
	mock.Mock
}

// ConfigServiceClient provides a mock function with given fields:
func (_m *DynamicOptions) ConfigServiceClient() client.Client {
	ret := _m.Called()

	var r0 client.Client
	if rf, ok := ret.Get(0).(func() client.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.Client)
		}
	}

	return r0
}

// InstrumentOptions provides a mock function with given fields:
func (_m *DynamicOptions) InstrumentOptions() utils.Options {
	ret := _m.Called()

	var r0 utils.Options
	if rf, ok := ret.Get(0).(func() utils.Options); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(utils.Options)
		}
	}

	return r0
}

// QueryOptions provides a mock function with given fields:
func (_m *DynamicOptions) QueryOptions() services.QueryOptions {
	ret := _m.Called()

	var r0 services.QueryOptions
	if rf, ok := ret.Get(0).(func() services.QueryOptions); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(services.QueryOptions)
		}
	}

	return r0
}

// ServiceID provides a mock function with given fields:
func (_m *DynamicOptions) ServiceID() services.ServiceID {
	ret := _m.Called()

	var r0 services.ServiceID
	if rf, ok := ret.Get(0).(func() services.ServiceID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(services.ServiceID)
		}
	}

	return r0
}

// ServicesOverrideOptions provides a mock function with given fields:
func (_m *DynamicOptions) ServicesOverrideOptions() services.OverrideOptions {
	ret := _m.Called()

	var r0 services.OverrideOptions
	if rf, ok := ret.Get(0).(func() services.OverrideOptions); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(services.OverrideOptions)
		}
	}

	return r0
}

// SetConfigServiceClient provides a mock function with given fields: c
func (_m *DynamicOptions) SetConfigServiceClient(c client.Client) topology.DynamicOptions {
	ret := _m.Called(c)

	var r0 topology.DynamicOptions
	if rf, ok := ret.Get(0).(func(client.Client) topology.DynamicOptions); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(topology.DynamicOptions)
		}
	}

	return r0
}

// SetInstrumentOptions provides a mock function with given fields: value
func (_m *DynamicOptions) SetInstrumentOptions(value utils.Options) topology.DynamicOptions {
	ret := _m.Called(value)

	var r0 topology.DynamicOptions
	if rf, ok := ret.Get(0).(func(utils.Options) topology.DynamicOptions); ok {
		r0 = rf(value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(topology.DynamicOptions)
		}
	}

	return r0
}

// SetQueryOptions provides a mock function with given fields: value
func (_m *DynamicOptions) SetQueryOptions(value services.QueryOptions) topology.DynamicOptions {
	ret := _m.Called(value)

	var r0 topology.DynamicOptions
	if rf, ok := ret.Get(0).(func(services.QueryOptions) topology.DynamicOptions); ok {
		r0 = rf(value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(topology.DynamicOptions)
		}
	}

	return r0
}

// SetServiceID provides a mock function with given fields: s
func (_m *DynamicOptions) SetServiceID(s services.ServiceID) topology.DynamicOptions {
	ret := _m.Called(s)

	var r0 topology.DynamicOptions
	if rf, ok := ret.Get(0).(func(services.ServiceID) topology.DynamicOptions); ok {
		r0 = rf(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(topology.DynamicOptions)
		}
	}

	return r0
}

// SetServicesOverrideOptions provides a mock function with given fields: opts
func (_m *DynamicOptions) SetServicesOverrideOptions(opts services.OverrideOptions) topology.DynamicOptions {
	ret := _m.Called(opts)

	var r0 topology.DynamicOptions
	if rf, ok := ret.Get(0).(func(services.OverrideOptions) topology.DynamicOptions); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(topology.DynamicOptions)
		}
	}

	return r0
}

// Validate provides a mock function with given fields:
func (_m *DynamicOptions) Validate() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
