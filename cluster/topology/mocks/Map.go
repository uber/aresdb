// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"
import shard "github.com/uber/aresdb/cluster/shard"
import topology "github.com/uber/aresdb/cluster/topology"

// Map is an autogenerated mock type for the Map type
type Map struct {
	mock.Mock
}

// HostShardSets provides a mock function with given fields:
func (_m *Map) HostShardSets() []topology.HostShardSet {
	ret := _m.Called()

	var r0 []topology.HostShardSet
	if rf, ok := ret.Get(0).(func() []topology.HostShardSet); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]topology.HostShardSet)
		}
	}

	return r0
}

// Hosts provides a mock function with given fields:
func (_m *Map) Hosts() []topology.Host {
	ret := _m.Called()

	var r0 []topology.Host
	if rf, ok := ret.Get(0).(func() []topology.Host); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]topology.Host)
		}
	}

	return r0
}

// HostsLen provides a mock function with given fields:
func (_m *Map) HostsLen() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// LookupHostShardSet provides a mock function with given fields: hostID
func (_m *Map) LookupHostShardSet(hostID string) (topology.HostShardSet, bool) {
	ret := _m.Called(hostID)

	var r0 topology.HostShardSet
	if rf, ok := ret.Get(0).(func(string) topology.HostShardSet); ok {
		r0 = rf(hostID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(topology.HostShardSet)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(hostID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Replicas provides a mock function with given fields:
func (_m *Map) Replicas() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// RouteShard provides a mock function with given fields: _a0
func (_m *Map) RouteShard(_a0 uint32) ([]topology.Host, error) {
	ret := _m.Called(_a0)

	var r0 []topology.Host
	if rf, ok := ret.Get(0).(func(uint32) []topology.Host); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]topology.Host)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint32) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShardSet provides a mock function with given fields:
func (_m *Map) ShardSet() shard.ShardSet {
	ret := _m.Called()

	var r0 shard.ShardSet
	if rf, ok := ret.Get(0).(func() shard.ShardSet); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(shard.ShardSet)
		}
	}

	return r0
}
