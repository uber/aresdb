// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"
import topology "github.com/uber/aresdb/cluster/topology"

// DynamicTopology is an autogenerated mock type for the DynamicTopology type
type DynamicTopology struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *DynamicTopology) Close() {
	_m.Called()
}

// Get provides a mock function with given fields:
func (_m *DynamicTopology) Get() topology.Map {
	ret := _m.Called()

	var r0 topology.Map
	if rf, ok := ret.Get(0).(func() topology.Map); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(topology.Map)
		}
	}

	return r0
}

// MarkShardsAvailable provides a mock function with given fields: instanceID, shardIDs
func (_m *DynamicTopology) MarkShardsAvailable(instanceID string, shardIDs ...uint32) error {
	_va := make([]interface{}, len(shardIDs))
	for _i := range shardIDs {
		_va[_i] = shardIDs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, instanceID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...uint32) error); ok {
		r0 = rf(instanceID, shardIDs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Watch provides a mock function with given fields:
func (_m *DynamicTopology) Watch() (topology.MapWatch, error) {
	ret := _m.Called()

	var r0 topology.MapWatch
	if rf, ok := ret.Get(0).(func() topology.MapWatch); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(topology.MapWatch)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
