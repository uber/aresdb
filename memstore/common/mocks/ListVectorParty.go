// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import common "github.com/uber/aresdb/memstore/common"
import mock "github.com/stretchr/testify/mock"
import unsafe "unsafe"

// ListVectorParty is an autogenerated mock type for the ListVectorParty type
type ListVectorParty struct {
	mock.Mock
}

// ReadElementBool provides a mock function with given fields: row, i
func (_m *ListVectorParty) ReadElementBool(row int, i int) bool {
	ret := _m.Called(row, i)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, int) bool); ok {
		r0 = rf(row, i)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ReadElementValidity provides a mock function with given fields: row, i
func (_m *ListVectorParty) ReadElementValidity(row int, i int) bool {
	ret := _m.Called(row, i)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, int) bool); ok {
		r0 = rf(row, i)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ReadElementValue provides a mock function with given fields: row, i
func (_m *ListVectorParty) ReadElementValue(row int, i int) unsafe.Pointer {
	ret := _m.Called(row, i)

	var r0 unsafe.Pointer
	if rf, ok := ret.Get(0).(func(int, int) unsafe.Pointer); ok {
		r0 = rf(row, i)
	} else {
		r0 = ret.Get(0).(unsafe.Pointer)
	}

	return r0
}

// SetListValue provides a mock function with given fields: row, reader, newLen
func (_m *ListVectorParty) SetListValue(row int, reader common.ListDataValueReader, newLen int) {
	_m.Called(row, reader, newLen)
}
