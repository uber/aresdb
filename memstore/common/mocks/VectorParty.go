// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	"github.com/uber/aresdb/memstore/common"
	"github.com/uber/aresdb/memstore/vectors"
)
import "io"
import "github.com/stretchr/testify/mock"
import "os"

// VectorParty is an autogenerated mock type for the VectorParty type
type VectorParty struct {
	mock.Mock
}

// Allocate provides a mock function with given fields: hasCount
func (_m *VectorParty) Allocate(hasCount bool) {
	_m.Called(hasCount)
}

// AsList provides a mock function with given fields:
func (_m *VectorParty) AsList() vectors.ListVectorParty {
	ret := _m.Called()

	var r0 vectors.ListVectorParty
	if rf, ok := ret.Get(0).(func() vectors.ListVectorParty); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vectors.ListVectorParty)
		}
	}

	return r0
}

// Dump provides a mock function with given fields: file
func (_m *VectorParty) Dump(file *os.File) {
	_m.Called(file)
}

// Equals provides a mock function with given fields: other
func (_m *VectorParty) Equals(other vectors.VectorParty) bool {
	ret := _m.Called(other)

	var r0 bool
	if rf, ok := ret.Get(0).(func(vectors.VectorParty) bool); ok {
		r0 = rf(other)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetBytes provides a mock function with given fields:
func (_m *VectorParty) GetBytes() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetDataType provides a mock function with given fields:
func (_m *VectorParty) GetDataType() common.DataType {
	ret := _m.Called()

	var r0 common.DataType
	if rf, ok := ret.Get(0).(func() common.DataType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(common.DataType)
	}

	return r0
}

// GetDataValue provides a mock function with given fields: offset
func (_m *VectorParty) GetDataValue(offset int) common.DataValue {
	ret := _m.Called(offset)

	var r0 common.DataValue
	if rf, ok := ret.Get(0).(func(int) common.DataValue); ok {
		r0 = rf(offset)
	} else {
		r0 = ret.Get(0).(common.DataValue)
	}

	return r0
}

// GetDataValueByRow provides a mock function with given fields: row
func (_m *VectorParty) GetDataValueByRow(row int) common.DataValue {
	ret := _m.Called(row)

	var r0 common.DataValue
	if rf, ok := ret.Get(0).(func(int) common.DataValue); ok {
		r0 = rf(row)
	} else {
		r0 = ret.Get(0).(common.DataValue)
	}

	return r0
}

// GetLength provides a mock function with given fields:
func (_m *VectorParty) GetLength() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetNonDefaultValueCount provides a mock function with given fields:
func (_m *VectorParty) GetNonDefaultValueCount() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetValidity provides a mock function with given fields: offset
func (_m *VectorParty) GetValidity(offset int) bool {
	ret := _m.Called(offset)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(offset)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsList provides a mock function with given fields:
func (_m *VectorParty) IsList() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Read provides a mock function with given fields: reader, serializer
func (_m *VectorParty) Read(reader io.Reader, serializer vectors.VectorPartySerializer) error {
	ret := _m.Called(reader, serializer)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Reader, vectors.VectorPartySerializer) error); ok {
		r0 = rf(reader, serializer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SafeDestruct provides a mock function with given fields:
func (_m *VectorParty) SafeDestruct() {
	_m.Called()
}

// SetDataValue provides a mock function with given fields: offset, value, countsUpdateMode, counts
func (_m *VectorParty) SetDataValue(offset int, value common.DataValue, countsUpdateMode vectors.ValueCountsUpdateMode, counts ...uint32) {
	_va := make([]interface{}, len(counts))
	for _i := range counts {
		_va[_i] = counts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, offset, value, countsUpdateMode)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Slice provides a mock function with given fields: startRow, numRows
func (_m *VectorParty) Slice(startRow int, numRows int) vectors.SlicedVector {
	ret := _m.Called(startRow, numRows)

	var r0 vectors.SlicedVector
	if rf, ok := ret.Get(0).(func(int, int) vectors.SlicedVector); ok {
		r0 = rf(startRow, numRows)
	} else {
		r0 = ret.Get(0).(vectors.SlicedVector)
	}

	return r0
}

// Write provides a mock function with given fields: writer
func (_m *VectorParty) Write(writer io.Writer) error {
	ret := _m.Called(writer)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Writer) error); ok {
		r0 = rf(writer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
