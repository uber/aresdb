// Code generated by mockery v1.0.0
package mocks

import common "github.com/uber/aresdb/memstore/common"
import mock "github.com/stretchr/testify/mock"

// TableSchemaReader is an autogenerated mock type for the TableSchemaReader type
type TableSchemaReader struct {
	mock.Mock
}

// GetSchema provides a mock function with given fields: table
func (_m *TableSchemaReader) GetSchema(table string) (*common.TableSchema, error) {
	ret := _m.Called(table)

	var r0 *common.TableSchema
	if rf, ok := ret.Get(0).(func(string) *common.TableSchema); ok {
		r0 = rf(table)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.TableSchema)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(table)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSchemas provides a mock function with given fields:
func (_m *TableSchemaReader) GetSchemas() map[string]*common.TableSchema {
	ret := _m.Called()

	var r0 map[string]*common.TableSchema
	if rf, ok := ret.Get(0).(func() map[string]*common.TableSchema); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*common.TableSchema)
		}
	}

	return r0
}

// Lock provides a mock function with given fields:
func (_m *TableSchemaReader) Lock() {
	_m.Called()
}

// RLock provides a mock function with given fields:
func (_m *TableSchemaReader) RLock() {
	_m.Called()
}

// RUnlock provides a mock function with given fields:
func (_m *TableSchemaReader) RUnlock() {
	_m.Called()
}

// Unlock provides a mock function with given fields:
func (_m *TableSchemaReader) Unlock() {
	_m.Called()
}
