// Code generated by mockery v1.0.0
package mocks

import common "github.com/uber/aresdb/broker/common"
import context "context"
import mock "github.com/stretchr/testify/mock"
import querycommon "github.com/uber/aresdb/query/common"

// BlockingPlanNode is an autogenerated mock type for the BlockingPlanNode type
type BlockingPlanNode struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0
func (_m *BlockingPlanNode) Add(_a0 ...common.BlockingPlanNode) {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Children provides a mock function with given fields:
func (_m *BlockingPlanNode) Children() []common.BlockingPlanNode {
	ret := _m.Called()

	var r0 []common.BlockingPlanNode
	if rf, ok := ret.Get(0).(func() []common.BlockingPlanNode); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.BlockingPlanNode)
		}
	}

	return r0
}

// Execute provides a mock function with given fields: ctx
func (_m *BlockingPlanNode) Execute(ctx context.Context) (querycommon.AQLQueryResult, error) {
	ret := _m.Called(ctx)

	var r0 querycommon.AQLQueryResult
	if rf, ok := ret.Get(0).(func(context.Context) querycommon.AQLQueryResult); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(querycommon.AQLQueryResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
