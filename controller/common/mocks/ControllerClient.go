//  Copyright (c) 2017-2018 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Code generated by mockery v1.0.0
package mocks

import (
	"os"

	"github.com/uber-go/tally"
	"github.com/uber/aresdb/metastore/common"
	"github.com/uber/aresdb/subscriber/common/rules"
	"github.com/uber/aresdb/subscriber/common/tools"
	"github.com/uber/aresdb/subscriber/config"
	"go.uber.org/zap"

	"github.com/stretchr/testify/mock"
	"github.com/uber/aresdb/client"
	"github.com/uber/aresdb/utils"
)

// ControllerClient is an autogenerated mock type for the ControllerClient type
type ControllerClient struct {
	mock.Mock
}

// GetAllSchema provides a mock function with given fields: namespace
func (_m *ControllerClient) GetAllSchema(namespace string) ([]common.Table, error) {
	ret := _m.Called(namespace)

	var r0 []common.Table
	if rf, ok := ret.Get(0).(func(string) []common.Table); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Table)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSchemaHash provides a mock function with given fields: namespace
func (_m *ControllerClient) GetSchemaHash(namespace string) (string, error) {
	ret := _m.Called(namespace)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(namespace)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssignmentHash get hash code of assignment
func (_m *ControllerClient) GetAssignmentHash(jobNamespace, instance string) (string, error) {
	return "12345", nil
}

// GetAssignment gets the job assignment of the ares-subscriber
func (_m *ControllerClient) GetAssignment(jobNamespace, instance string) (*rules.Assignment, error) {
	serviceConfig := config.ServiceConfig{
		Environment: utils.EnvironmentContext{
			Deployment:         "test",
			RuntimeEnvironment: "test",
			Zone:               "local",
		},
		Logger: zap.NewNop(),
		Scope:  tally.NoopScope,
	}
	serviceConfig.ActiveJobs = []string{"job1"}
	serviceConfig.ActiveAresClusters = map[string]config.SinkConfig{
		"dev01": {
			AresDBConnectorConfig: client.ConnectorConfig{Address: "localhost:8888"},
		},
	}
	rootPath := tools.GetModulePath("")
	os.Chdir(rootPath)
	jobConfigs := make(rules.JobConfigs)
	rules.AddLocalJobConfig(serviceConfig, jobConfigs)
	jobs := []*rules.JobConfig{
		jobConfigs["job1"]["dev01"],
	}

	aresClusters := map[string]config.SinkConfig{
		"dev01": {
			AresDBConnectorConfig: client.ConnectorConfig{Address: "localhost:5436"},
		},
	}

	assignment := &rules.Assignment{
		Subscriber:   "ares-subscriber",
		Jobs:         jobs,
		AresClusters: aresClusters,
	}
	return assignment, nil
}

// FetchAllSchemas fetches all schemas
func (_m *ControllerClient) FetchAllSchemas() ([]*common.Table, error) {
	schemas, err := _m.GetAllSchema("")
	if err != nil {
		return nil, err
	}
	tables := make([]*common.Table, 0, len(schemas))
	for i, _ := range schemas {
		tables = append(tables, &schemas[i])
	}

	return tables, nil
}

// FetchSchema fetch one schema for given table
func (_m *ControllerClient) FetchSchema(table string) (*common.Table, error) {
	ret := _m.Called(table)

	var r0 *common.Table
	if rf, ok := ret.Get(0).(func(string) *common.Table); ok {
		r0 = rf(table)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Table)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(table)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAllEnums fetches all enums for given table and column
func (_m *ControllerClient) FetchAllEnums(tableName string, columnName string) ([]string, error) {
	ret := _m.Called(tableName, columnName)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = rf(tableName, columnName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(tableName, columnName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExtendEnumCases extends enum cases to given table column
func (_m *ControllerClient) ExtendEnumCases(tableName, columnName string, enumCases []string) ([]int, error) {
	ret := _m.Called(tableName, columnName, enumCases)

	var r0 []int
	if rf, ok := ret.Get(0).(func(string, string, []string) []int); ok {
		r0 = rf(tableName, columnName, enumCases)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, []string) error); ok {
		r1 = rf(tableName, columnName, enumCases)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
