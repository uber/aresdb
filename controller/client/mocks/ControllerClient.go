//  Copyright (c) 2017-2018 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Code generated by mockery v1.0.0
package mocks

import "github.com/uber/aresdb/metastore/common"
import "github.com/stretchr/testify/mock"
import "github.com/uber/aresdb/controller/models"

// ControllerClient is an autogenerated mock type for the ControllerClient type
type ControllerClient struct {
	mock.Mock
}

// ExtendEnumCases provides a mock function with given fields: tableName, columnName, enumCases
func (_m *ControllerClient) ExtendEnumCases(tableName string, columnName string, enumCases []string) ([]int, error) {
	ret := _m.Called(tableName, columnName, enumCases)

	var r0 []int
	if rf, ok := ret.Get(0).(func(string, string, []string) []int); ok {
		r0 = rf(tableName, columnName, enumCases)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, []string) error); ok {
		r1 = rf(tableName, columnName, enumCases)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAllEnums provides a mock function with given fields: tableName, columnName
func (_m *ControllerClient) FetchAllEnums(tableName string, columnName string) ([]string, error) {
	ret := _m.Called(tableName, columnName)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = rf(tableName, columnName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(tableName, columnName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAllSchemas provides a mock function with given fields:
func (_m *ControllerClient) FetchAllSchemas() ([]*common.Table, error) {
	ret := _m.Called()

	var r0 []*common.Table
	if rf, ok := ret.Get(0).(func() []*common.Table); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*common.Table)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchSchema provides a mock function with given fields: table
func (_m *ControllerClient) FetchSchema(table string) (*common.Table, error) {
	ret := _m.Called(table)

	var r0 *common.Table
	if rf, ok := ret.Get(0).(func(string) *common.Table); ok {
		r0 = rf(table)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Table)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(table)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllSchema provides a mock function with given fields: namespace
func (_m *ControllerClient) GetAllSchema(namespace string) ([]common.Table, error) {
	ret := _m.Called(namespace)

	var r0 []common.Table
	if rf, ok := ret.Get(0).(func(string) []common.Table); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Table)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssignment provides a mock function with given fields: jobNamespace, instance
func (_m *ControllerClient) GetAssignment(jobNamespace string, instance string) (*models.IngestionAssignment, error) {
	ret := _m.Called(jobNamespace, instance)

	var r0 *models.IngestionAssignment
	if rf, ok := ret.Get(0).(func(string, string) *models.IngestionAssignment); ok {
		r0 = rf(jobNamespace, instance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.IngestionAssignment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(jobNamespace, instance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssignmentHash provides a mock function with given fields: jobNamespace, instance
func (_m *ControllerClient) GetAssignmentHash(jobNamespace string, instance string) (string, error) {
	ret := _m.Called(jobNamespace, instance)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(jobNamespace, instance)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(jobNamespace, instance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSchemaHash provides a mock function with given fields: namespace
func (_m *ControllerClient) GetSchemaHash(namespace string) (string, error) {
	ret := _m.Called(namespace)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(namespace)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
