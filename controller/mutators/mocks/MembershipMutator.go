//  Copyright (c) 2017-2018 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Code generated by mockery v1.0.0
package mocks

import "github.com/stretchr/testify/mock"
import "github.com/uber/aresdb/controller/models"

// MembershipMutator is an autogenerated mock type for the MembershipMutator type
type MembershipMutator struct {
	mock.Mock
}

// GetHash provides a mock function with given fields: namespace
func (_m *MembershipMutator) GetHash(namespace string) (string, error) {
	ret := _m.Called(namespace)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(namespace)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstance provides a mock function with given fields: namespace, instanceName
func (_m *MembershipMutator) GetInstance(namespace string, instanceName string) (models.Instance, error) {
	ret := _m.Called(namespace, instanceName)

	var r0 models.Instance
	if rf, ok := ret.Get(0).(func(string, string) models.Instance); ok {
		r0 = rf(namespace, instanceName)
	} else {
		r0 = ret.Get(0).(models.Instance)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, instanceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstances provides a mock function with given fields: namespace
func (_m *MembershipMutator) GetInstances(namespace string) ([]models.Instance, error) {
	ret := _m.Called(namespace)

	var r0 []models.Instance
	if rf, ok := ret.Get(0).(func(string) []models.Instance); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Instance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Join provides a mock function with given fields: namespace, instance
func (_m *MembershipMutator) Join(namespace string, instance models.Instance) error {
	ret := _m.Called(namespace, instance)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, models.Instance) error); ok {
		r0 = rf(namespace, instance)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Leave provides a mock function with given fields: namespace, instanceName
func (_m *MembershipMutator) Leave(namespace string, instanceName string) error {
	ret := _m.Called(namespace, instanceName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(namespace, instanceName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
