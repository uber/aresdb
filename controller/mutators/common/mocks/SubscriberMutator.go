// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/uber/aresdb/controller/models"

// SubscriberMutator is an autogenerated mock type for the SubscriberMutator type
type SubscriberMutator struct {
	mock.Mock
}

// GetHash provides a mock function with given fields: namespace
func (_m *SubscriberMutator) GetHash(namespace string) (string, error) {
	ret := _m.Called(namespace)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(namespace)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscriber provides a mock function with given fields: namespace, subscriberName
func (_m *SubscriberMutator) GetSubscriber(namespace string, subscriberName string) (models.Subscriber, error) {
	ret := _m.Called(namespace, subscriberName)

	var r0 models.Subscriber
	if rf, ok := ret.Get(0).(func(string, string) models.Subscriber); ok {
		r0 = rf(namespace, subscriberName)
	} else {
		r0 = ret.Get(0).(models.Subscriber)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, subscriberName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscribers provides a mock function with given fields: namespace
func (_m *SubscriberMutator) GetSubscribers(namespace string) ([]models.Subscriber, error) {
	ret := _m.Called(namespace)

	var r0 []models.Subscriber
	if rf, ok := ret.Get(0).(func(string) []models.Subscriber); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Subscriber)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
