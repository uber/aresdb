// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import context "context"
import grpc "google.golang.org/grpc"
import mock "github.com/stretchr/testify/mock"
import rpc "github.com/uber/aresdb/datanode/generated/proto/rpc"

// PeerDataNodeClient is an autogenerated mock type for the PeerDataNodeClient type
type PeerDataNodeClient struct {
	mock.Mock
}

// BenchmarkFileTransfer provides a mock function with given fields: ctx, in, opts
func (_m *PeerDataNodeClient) BenchmarkFileTransfer(ctx context.Context, in *rpc.BenchmarkRequest, opts ...grpc.CallOption) (rpc.PeerDataNode_BenchmarkFileTransferClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 rpc.PeerDataNode_BenchmarkFileTransferClient
	if rf, ok := ret.Get(0).(func(context.Context, *rpc.BenchmarkRequest, ...grpc.CallOption) rpc.PeerDataNode_BenchmarkFileTransferClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rpc.PeerDataNode_BenchmarkFileTransferClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rpc.BenchmarkRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchTableShardMetaData provides a mock function with given fields: ctx, in, opts
func (_m *PeerDataNodeClient) FetchTableShardMetaData(ctx context.Context, in *rpc.TableShardMetaDataRequest, opts ...grpc.CallOption) (*rpc.TableShardMetaData, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *rpc.TableShardMetaData
	if rf, ok := ret.Get(0).(func(context.Context, *rpc.TableShardMetaDataRequest, ...grpc.CallOption) *rpc.TableShardMetaData); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpc.TableShardMetaData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rpc.TableShardMetaDataRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchVectorPartyRawData provides a mock function with given fields: ctx, in, opts
func (_m *PeerDataNodeClient) FetchVectorPartyRawData(ctx context.Context, in *rpc.VectorPartyRawDataRequest, opts ...grpc.CallOption) (rpc.PeerDataNode_FetchVectorPartyRawDataClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 rpc.PeerDataNode_FetchVectorPartyRawDataClient
	if rf, ok := ret.Get(0).(func(context.Context, *rpc.VectorPartyRawDataRequest, ...grpc.CallOption) rpc.PeerDataNode_FetchVectorPartyRawDataClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rpc.PeerDataNode_FetchVectorPartyRawDataClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rpc.VectorPartyRawDataRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeepAlive provides a mock function with given fields: ctx, opts
func (_m *PeerDataNodeClient) KeepAlive(ctx context.Context, opts ...grpc.CallOption) (rpc.PeerDataNode_KeepAliveClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 rpc.PeerDataNode_KeepAliveClient
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) rpc.PeerDataNode_KeepAliveClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rpc.PeerDataNode_KeepAliveClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartSession provides a mock function with given fields: ctx, in, opts
func (_m *PeerDataNodeClient) StartSession(ctx context.Context, in *rpc.StartSessionRequest, opts ...grpc.CallOption) (*rpc.Session, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *rpc.Session
	if rf, ok := ret.Get(0).(func(context.Context, *rpc.StartSessionRequest, ...grpc.CallOption) *rpc.Session); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpc.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rpc.StartSessionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
