// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peer_streaming.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type KafkaOffset struct {
	CheckPointOffset     int64    `protobuf:"varint,1,opt,name=checkPointOffset,proto3" json:"checkPointOffset,omitempty"`
	CommitOffset         int64    `protobuf:"varint,2,opt,name=commitOffset,proto3" json:"commitOffset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KafkaOffset) Reset()         { *m = KafkaOffset{} }
func (m *KafkaOffset) String() string { return proto.CompactTextString(m) }
func (*KafkaOffset) ProtoMessage()    {}
func (*KafkaOffset) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b771d46e8b2ce71, []int{0}
}

func (m *KafkaOffset) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KafkaOffset.Unmarshal(m, b)
}
func (m *KafkaOffset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KafkaOffset.Marshal(b, m, deterministic)
}
func (m *KafkaOffset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KafkaOffset.Merge(m, src)
}
func (m *KafkaOffset) XXX_Size() int {
	return xxx_messageInfo_KafkaOffset.Size(m)
}
func (m *KafkaOffset) XXX_DiscardUnknown() {
	xxx_messageInfo_KafkaOffset.DiscardUnknown(m)
}

var xxx_messageInfo_KafkaOffset proto.InternalMessageInfo

func (m *KafkaOffset) GetCheckPointOffset() int64 {
	if m != nil {
		return m.CheckPointOffset
	}
	return 0
}

func (m *KafkaOffset) GetCommitOffset() int64 {
	if m != nil {
		return m.CommitOffset
	}
	return 0
}

type BackfillCheckpoint struct {
	RedoFileID           int64    `protobuf:"varint,1,opt,name=redoFileID,proto3" json:"redoFileID,omitempty"`
	RedoFileOffset       uint32   `protobuf:"varint,2,opt,name=redoFileOffset,proto3" json:"redoFileOffset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BackfillCheckpoint) Reset()         { *m = BackfillCheckpoint{} }
func (m *BackfillCheckpoint) String() string { return proto.CompactTextString(m) }
func (*BackfillCheckpoint) ProtoMessage()    {}
func (*BackfillCheckpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b771d46e8b2ce71, []int{1}
}

func (m *BackfillCheckpoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BackfillCheckpoint.Unmarshal(m, b)
}
func (m *BackfillCheckpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BackfillCheckpoint.Marshal(b, m, deterministic)
}
func (m *BackfillCheckpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackfillCheckpoint.Merge(m, src)
}
func (m *BackfillCheckpoint) XXX_Size() int {
	return xxx_messageInfo_BackfillCheckpoint.Size(m)
}
func (m *BackfillCheckpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_BackfillCheckpoint.DiscardUnknown(m)
}

var xxx_messageInfo_BackfillCheckpoint proto.InternalMessageInfo

func (m *BackfillCheckpoint) GetRedoFileID() int64 {
	if m != nil {
		return m.RedoFileID
	}
	return 0
}

func (m *BackfillCheckpoint) GetRedoFileOffset() uint32 {
	if m != nil {
		return m.RedoFileOffset
	}
	return 0
}

type ArchiveVersion struct {
	ArchiveVersion       uint32   `protobuf:"varint,1,opt,name=archiveVersion,proto3" json:"archiveVersion,omitempty"`
	BackfillSeq          uint32   `protobuf:"varint,2,opt,name=backfillSeq,proto3" json:"backfillSeq,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArchiveVersion) Reset()         { *m = ArchiveVersion{} }
func (m *ArchiveVersion) String() string { return proto.CompactTextString(m) }
func (*ArchiveVersion) ProtoMessage()    {}
func (*ArchiveVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b771d46e8b2ce71, []int{2}
}

func (m *ArchiveVersion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArchiveVersion.Unmarshal(m, b)
}
func (m *ArchiveVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArchiveVersion.Marshal(b, m, deterministic)
}
func (m *ArchiveVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArchiveVersion.Merge(m, src)
}
func (m *ArchiveVersion) XXX_Size() int {
	return xxx_messageInfo_ArchiveVersion.Size(m)
}
func (m *ArchiveVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_ArchiveVersion.DiscardUnknown(m)
}

var xxx_messageInfo_ArchiveVersion proto.InternalMessageInfo

func (m *ArchiveVersion) GetArchiveVersion() uint32 {
	if m != nil {
		return m.ArchiveVersion
	}
	return 0
}

func (m *ArchiveVersion) GetBackfillSeq() uint32 {
	if m != nil {
		return m.BackfillSeq
	}
	return 0
}

type SnapshotVersion struct {
	RedoFileID           int64    `protobuf:"varint,1,opt,name=redoFileID,proto3" json:"redoFileID,omitempty"`
	RedoFileOffset       uint32   `protobuf:"varint,2,opt,name=redoFileOffset,proto3" json:"redoFileOffset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnapshotVersion) Reset()         { *m = SnapshotVersion{} }
func (m *SnapshotVersion) String() string { return proto.CompactTextString(m) }
func (*SnapshotVersion) ProtoMessage()    {}
func (*SnapshotVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b771d46e8b2ce71, []int{3}
}

func (m *SnapshotVersion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnapshotVersion.Unmarshal(m, b)
}
func (m *SnapshotVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnapshotVersion.Marshal(b, m, deterministic)
}
func (m *SnapshotVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotVersion.Merge(m, src)
}
func (m *SnapshotVersion) XXX_Size() int {
	return xxx_messageInfo_SnapshotVersion.Size(m)
}
func (m *SnapshotVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotVersion.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotVersion proto.InternalMessageInfo

func (m *SnapshotVersion) GetRedoFileID() int64 {
	if m != nil {
		return m.RedoFileID
	}
	return 0
}

func (m *SnapshotVersion) GetRedoFileOffset() uint32 {
	if m != nil {
		return m.RedoFileOffset
	}
	return 0
}

type VectorPartyMetaData struct {
	ColumnID             uint32   `protobuf:"varint,1,opt,name=columnID,proto3" json:"columnID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VectorPartyMetaData) Reset()         { *m = VectorPartyMetaData{} }
func (m *VectorPartyMetaData) String() string { return proto.CompactTextString(m) }
func (*VectorPartyMetaData) ProtoMessage()    {}
func (*VectorPartyMetaData) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b771d46e8b2ce71, []int{4}
}

func (m *VectorPartyMetaData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VectorPartyMetaData.Unmarshal(m, b)
}
func (m *VectorPartyMetaData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VectorPartyMetaData.Marshal(b, m, deterministic)
}
func (m *VectorPartyMetaData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VectorPartyMetaData.Merge(m, src)
}
func (m *VectorPartyMetaData) XXX_Size() int {
	return xxx_messageInfo_VectorPartyMetaData.Size(m)
}
func (m *VectorPartyMetaData) XXX_DiscardUnknown() {
	xxx_messageInfo_VectorPartyMetaData.DiscardUnknown(m)
}

var xxx_messageInfo_VectorPartyMetaData proto.InternalMessageInfo

func (m *VectorPartyMetaData) GetColumnID() uint32 {
	if m != nil {
		return m.ColumnID
	}
	return 0
}

type BatchMetaData struct {
	BatchID              int32                  `protobuf:"varint,1,opt,name=batchID,proto3" json:"batchID,omitempty"`
	Size                 uint32                 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	ArchiveVersion       *ArchiveVersion        `protobuf:"bytes,3,opt,name=archiveVersion,proto3" json:"archiveVersion,omitempty"`
	Vps                  []*VectorPartyMetaData `protobuf:"bytes,4,rep,name=vps,proto3" json:"vps,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *BatchMetaData) Reset()         { *m = BatchMetaData{} }
func (m *BatchMetaData) String() string { return proto.CompactTextString(m) }
func (*BatchMetaData) ProtoMessage()    {}
func (*BatchMetaData) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b771d46e8b2ce71, []int{5}
}

func (m *BatchMetaData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchMetaData.Unmarshal(m, b)
}
func (m *BatchMetaData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchMetaData.Marshal(b, m, deterministic)
}
func (m *BatchMetaData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchMetaData.Merge(m, src)
}
func (m *BatchMetaData) XXX_Size() int {
	return xxx_messageInfo_BatchMetaData.Size(m)
}
func (m *BatchMetaData) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchMetaData.DiscardUnknown(m)
}

var xxx_messageInfo_BatchMetaData proto.InternalMessageInfo

func (m *BatchMetaData) GetBatchID() int32 {
	if m != nil {
		return m.BatchID
	}
	return 0
}

func (m *BatchMetaData) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *BatchMetaData) GetArchiveVersion() *ArchiveVersion {
	if m != nil {
		return m.ArchiveVersion
	}
	return nil
}

func (m *BatchMetaData) GetVps() []*VectorPartyMetaData {
	if m != nil {
		return m.Vps
	}
	return nil
}

type FactTableShardMetaData struct {
	HighWatermark        uint32              `protobuf:"varint,1,opt,name=highWatermark,proto3" json:"highWatermark,omitempty"`
	BackfillCheckpoint   *BackfillCheckpoint `protobuf:"bytes,2,opt,name=backfillCheckpoint,proto3" json:"backfillCheckpoint,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *FactTableShardMetaData) Reset()         { *m = FactTableShardMetaData{} }
func (m *FactTableShardMetaData) String() string { return proto.CompactTextString(m) }
func (*FactTableShardMetaData) ProtoMessage()    {}
func (*FactTableShardMetaData) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b771d46e8b2ce71, []int{6}
}

func (m *FactTableShardMetaData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FactTableShardMetaData.Unmarshal(m, b)
}
func (m *FactTableShardMetaData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FactTableShardMetaData.Marshal(b, m, deterministic)
}
func (m *FactTableShardMetaData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FactTableShardMetaData.Merge(m, src)
}
func (m *FactTableShardMetaData) XXX_Size() int {
	return xxx_messageInfo_FactTableShardMetaData.Size(m)
}
func (m *FactTableShardMetaData) XXX_DiscardUnknown() {
	xxx_messageInfo_FactTableShardMetaData.DiscardUnknown(m)
}

var xxx_messageInfo_FactTableShardMetaData proto.InternalMessageInfo

func (m *FactTableShardMetaData) GetHighWatermark() uint32 {
	if m != nil {
		return m.HighWatermark
	}
	return 0
}

func (m *FactTableShardMetaData) GetBackfillCheckpoint() *BackfillCheckpoint {
	if m != nil {
		return m.BackfillCheckpoint
	}
	return nil
}

type DimensionTableShardMetaData struct {
	SnapshotVersion      *SnapshotVersion `protobuf:"bytes,1,opt,name=snapshotVersion,proto3" json:"snapshotVersion,omitempty"`
	LastBatchID          int32            `protobuf:"varint,2,opt,name=lastBatchID,proto3" json:"lastBatchID,omitempty"`
	LastBatchSize        int32            `protobuf:"varint,3,opt,name=lastBatchSize,proto3" json:"lastBatchSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DimensionTableShardMetaData) Reset()         { *m = DimensionTableShardMetaData{} }
func (m *DimensionTableShardMetaData) String() string { return proto.CompactTextString(m) }
func (*DimensionTableShardMetaData) ProtoMessage()    {}
func (*DimensionTableShardMetaData) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b771d46e8b2ce71, []int{7}
}

func (m *DimensionTableShardMetaData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DimensionTableShardMetaData.Unmarshal(m, b)
}
func (m *DimensionTableShardMetaData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DimensionTableShardMetaData.Marshal(b, m, deterministic)
}
func (m *DimensionTableShardMetaData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DimensionTableShardMetaData.Merge(m, src)
}
func (m *DimensionTableShardMetaData) XXX_Size() int {
	return xxx_messageInfo_DimensionTableShardMetaData.Size(m)
}
func (m *DimensionTableShardMetaData) XXX_DiscardUnknown() {
	xxx_messageInfo_DimensionTableShardMetaData.DiscardUnknown(m)
}

var xxx_messageInfo_DimensionTableShardMetaData proto.InternalMessageInfo

func (m *DimensionTableShardMetaData) GetSnapshotVersion() *SnapshotVersion {
	if m != nil {
		return m.SnapshotVersion
	}
	return nil
}

func (m *DimensionTableShardMetaData) GetLastBatchID() int32 {
	if m != nil {
		return m.LastBatchID
	}
	return 0
}

func (m *DimensionTableShardMetaData) GetLastBatchSize() int32 {
	if m != nil {
		return m.LastBatchSize
	}
	return 0
}

type TableShardMetaData struct {
	Table       string       `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	Incarnation int32        `protobuf:"varint,2,opt,name=incarnation,proto3" json:"incarnation,omitempty"`
	Shard       uint32       `protobuf:"varint,3,opt,name=shard,proto3" json:"shard,omitempty"`
	KafkaOffset *KafkaOffset `protobuf:"bytes,4,opt,name=kafkaOffset,proto3" json:"kafkaOffset,omitempty"`
	// Types that are valid to be assigned to Meta:
	//	*TableShardMetaData_FactMeta
	//	*TableShardMetaData_DimensionMeta
	Meta                 isTableShardMetaData_Meta `protobuf_oneof:"meta"`
	Batches              []*BatchMetaData          `protobuf:"bytes,7,rep,name=batches,proto3" json:"batches,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *TableShardMetaData) Reset()         { *m = TableShardMetaData{} }
func (m *TableShardMetaData) String() string { return proto.CompactTextString(m) }
func (*TableShardMetaData) ProtoMessage()    {}
func (*TableShardMetaData) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b771d46e8b2ce71, []int{8}
}

func (m *TableShardMetaData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TableShardMetaData.Unmarshal(m, b)
}
func (m *TableShardMetaData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TableShardMetaData.Marshal(b, m, deterministic)
}
func (m *TableShardMetaData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableShardMetaData.Merge(m, src)
}
func (m *TableShardMetaData) XXX_Size() int {
	return xxx_messageInfo_TableShardMetaData.Size(m)
}
func (m *TableShardMetaData) XXX_DiscardUnknown() {
	xxx_messageInfo_TableShardMetaData.DiscardUnknown(m)
}

var xxx_messageInfo_TableShardMetaData proto.InternalMessageInfo

func (m *TableShardMetaData) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *TableShardMetaData) GetIncarnation() int32 {
	if m != nil {
		return m.Incarnation
	}
	return 0
}

func (m *TableShardMetaData) GetShard() uint32 {
	if m != nil {
		return m.Shard
	}
	return 0
}

func (m *TableShardMetaData) GetKafkaOffset() *KafkaOffset {
	if m != nil {
		return m.KafkaOffset
	}
	return nil
}

type isTableShardMetaData_Meta interface {
	isTableShardMetaData_Meta()
}

type TableShardMetaData_FactMeta struct {
	FactMeta *FactTableShardMetaData `protobuf:"bytes,5,opt,name=factMeta,proto3,oneof"`
}

type TableShardMetaData_DimensionMeta struct {
	DimensionMeta *DimensionTableShardMetaData `protobuf:"bytes,6,opt,name=dimensionMeta,proto3,oneof"`
}

func (*TableShardMetaData_FactMeta) isTableShardMetaData_Meta() {}

func (*TableShardMetaData_DimensionMeta) isTableShardMetaData_Meta() {}

func (m *TableShardMetaData) GetMeta() isTableShardMetaData_Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *TableShardMetaData) GetFactMeta() *FactTableShardMetaData {
	if x, ok := m.GetMeta().(*TableShardMetaData_FactMeta); ok {
		return x.FactMeta
	}
	return nil
}

func (m *TableShardMetaData) GetDimensionMeta() *DimensionTableShardMetaData {
	if x, ok := m.GetMeta().(*TableShardMetaData_DimensionMeta); ok {
		return x.DimensionMeta
	}
	return nil
}

func (m *TableShardMetaData) GetBatches() []*BatchMetaData {
	if m != nil {
		return m.Batches
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TableShardMetaData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TableShardMetaData_FactMeta)(nil),
		(*TableShardMetaData_DimensionMeta)(nil),
	}
}

type TableShardMetaDataRequest struct {
	Table                string   `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	Incarnation          int32    `protobuf:"varint,2,opt,name=incarnation,proto3" json:"incarnation,omitempty"`
	Shard                uint32   `protobuf:"varint,3,opt,name=shard,proto3" json:"shard,omitempty"`
	StartBatchID         int32    `protobuf:"varint,4,opt,name=startBatchID,proto3" json:"startBatchID,omitempty"`
	EndBatchID           int32    `protobuf:"varint,5,opt,name=endBatchID,proto3" json:"endBatchID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TableShardMetaDataRequest) Reset()         { *m = TableShardMetaDataRequest{} }
func (m *TableShardMetaDataRequest) String() string { return proto.CompactTextString(m) }
func (*TableShardMetaDataRequest) ProtoMessage()    {}
func (*TableShardMetaDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b771d46e8b2ce71, []int{9}
}

func (m *TableShardMetaDataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TableShardMetaDataRequest.Unmarshal(m, b)
}
func (m *TableShardMetaDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TableShardMetaDataRequest.Marshal(b, m, deterministic)
}
func (m *TableShardMetaDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableShardMetaDataRequest.Merge(m, src)
}
func (m *TableShardMetaDataRequest) XXX_Size() int {
	return xxx_messageInfo_TableShardMetaDataRequest.Size(m)
}
func (m *TableShardMetaDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TableShardMetaDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TableShardMetaDataRequest proto.InternalMessageInfo

func (m *TableShardMetaDataRequest) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *TableShardMetaDataRequest) GetIncarnation() int32 {
	if m != nil {
		return m.Incarnation
	}
	return 0
}

func (m *TableShardMetaDataRequest) GetShard() uint32 {
	if m != nil {
		return m.Shard
	}
	return 0
}

func (m *TableShardMetaDataRequest) GetStartBatchID() int32 {
	if m != nil {
		return m.StartBatchID
	}
	return 0
}

func (m *TableShardMetaDataRequest) GetEndBatchID() int32 {
	if m != nil {
		return m.EndBatchID
	}
	return 0
}

type VectorPartyRawDataRequest struct {
	Table       string `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	Incarnation int32  `protobuf:"varint,2,opt,name=incarnation,proto3" json:"incarnation,omitempty"`
	Shard       uint32 `protobuf:"varint,3,opt,name=shard,proto3" json:"shard,omitempty"`
	BatchID     int32  `protobuf:"varint,4,opt,name=batchID,proto3" json:"batchID,omitempty"`
	// Types that are valid to be assigned to Version:
	//	*VectorPartyRawDataRequest_ArchiveVersion
	//	*VectorPartyRawDataRequest_SnapshotVersion
	Version              isVectorPartyRawDataRequest_Version `protobuf_oneof:"version"`
	ColumnID             uint32                              `protobuf:"varint,7,opt,name=columnID,proto3" json:"columnID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *VectorPartyRawDataRequest) Reset()         { *m = VectorPartyRawDataRequest{} }
func (m *VectorPartyRawDataRequest) String() string { return proto.CompactTextString(m) }
func (*VectorPartyRawDataRequest) ProtoMessage()    {}
func (*VectorPartyRawDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b771d46e8b2ce71, []int{10}
}

func (m *VectorPartyRawDataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VectorPartyRawDataRequest.Unmarshal(m, b)
}
func (m *VectorPartyRawDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VectorPartyRawDataRequest.Marshal(b, m, deterministic)
}
func (m *VectorPartyRawDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VectorPartyRawDataRequest.Merge(m, src)
}
func (m *VectorPartyRawDataRequest) XXX_Size() int {
	return xxx_messageInfo_VectorPartyRawDataRequest.Size(m)
}
func (m *VectorPartyRawDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VectorPartyRawDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VectorPartyRawDataRequest proto.InternalMessageInfo

func (m *VectorPartyRawDataRequest) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *VectorPartyRawDataRequest) GetIncarnation() int32 {
	if m != nil {
		return m.Incarnation
	}
	return 0
}

func (m *VectorPartyRawDataRequest) GetShard() uint32 {
	if m != nil {
		return m.Shard
	}
	return 0
}

func (m *VectorPartyRawDataRequest) GetBatchID() int32 {
	if m != nil {
		return m.BatchID
	}
	return 0
}

type isVectorPartyRawDataRequest_Version interface {
	isVectorPartyRawDataRequest_Version()
}

type VectorPartyRawDataRequest_ArchiveVersion struct {
	ArchiveVersion *ArchiveVersion `protobuf:"bytes,5,opt,name=archiveVersion,proto3,oneof"`
}

type VectorPartyRawDataRequest_SnapshotVersion struct {
	SnapshotVersion *SnapshotVersion `protobuf:"bytes,6,opt,name=snapshotVersion,proto3,oneof"`
}

func (*VectorPartyRawDataRequest_ArchiveVersion) isVectorPartyRawDataRequest_Version() {}

func (*VectorPartyRawDataRequest_SnapshotVersion) isVectorPartyRawDataRequest_Version() {}

func (m *VectorPartyRawDataRequest) GetVersion() isVectorPartyRawDataRequest_Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *VectorPartyRawDataRequest) GetArchiveVersion() *ArchiveVersion {
	if x, ok := m.GetVersion().(*VectorPartyRawDataRequest_ArchiveVersion); ok {
		return x.ArchiveVersion
	}
	return nil
}

func (m *VectorPartyRawDataRequest) GetSnapshotVersion() *SnapshotVersion {
	if x, ok := m.GetVersion().(*VectorPartyRawDataRequest_SnapshotVersion); ok {
		return x.SnapshotVersion
	}
	return nil
}

func (m *VectorPartyRawDataRequest) GetColumnID() uint32 {
	if m != nil {
		return m.ColumnID
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VectorPartyRawDataRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VectorPartyRawDataRequest_ArchiveVersion)(nil),
		(*VectorPartyRawDataRequest_SnapshotVersion)(nil),
	}
}

type VectorPartyRawData struct {
	Chunk                []byte   `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VectorPartyRawData) Reset()         { *m = VectorPartyRawData{} }
func (m *VectorPartyRawData) String() string { return proto.CompactTextString(m) }
func (*VectorPartyRawData) ProtoMessage()    {}
func (*VectorPartyRawData) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b771d46e8b2ce71, []int{11}
}

func (m *VectorPartyRawData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VectorPartyRawData.Unmarshal(m, b)
}
func (m *VectorPartyRawData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VectorPartyRawData.Marshal(b, m, deterministic)
}
func (m *VectorPartyRawData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VectorPartyRawData.Merge(m, src)
}
func (m *VectorPartyRawData) XXX_Size() int {
	return xxx_messageInfo_VectorPartyRawData.Size(m)
}
func (m *VectorPartyRawData) XXX_DiscardUnknown() {
	xxx_messageInfo_VectorPartyRawData.DiscardUnknown(m)
}

var xxx_messageInfo_VectorPartyRawData proto.InternalMessageInfo

func (m *VectorPartyRawData) GetChunk() []byte {
	if m != nil {
		return m.Chunk
	}
	return nil
}

type StartSessionRequest struct {
	Table                string   `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	Shard                uint32   `protobuf:"varint,2,opt,name=shard,proto3" json:"shard,omitempty"`
	Ttl                  int64    `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartSessionRequest) Reset()         { *m = StartSessionRequest{} }
func (m *StartSessionRequest) String() string { return proto.CompactTextString(m) }
func (*StartSessionRequest) ProtoMessage()    {}
func (*StartSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b771d46e8b2ce71, []int{12}
}

func (m *StartSessionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartSessionRequest.Unmarshal(m, b)
}
func (m *StartSessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartSessionRequest.Marshal(b, m, deterministic)
}
func (m *StartSessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartSessionRequest.Merge(m, src)
}
func (m *StartSessionRequest) XXX_Size() int {
	return xxx_messageInfo_StartSessionRequest.Size(m)
}
func (m *StartSessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartSessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartSessionRequest proto.InternalMessageInfo

func (m *StartSessionRequest) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *StartSessionRequest) GetShard() uint32 {
	if m != nil {
		return m.Shard
	}
	return 0
}

func (m *StartSessionRequest) GetTtl() int64 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

type Session struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Session) Reset()         { *m = Session{} }
func (m *Session) String() string { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()    {}
func (*Session) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b771d46e8b2ce71, []int{13}
}

func (m *Session) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Session.Unmarshal(m, b)
}
func (m *Session) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Session.Marshal(b, m, deterministic)
}
func (m *Session) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Session.Merge(m, src)
}
func (m *Session) XXX_Size() int {
	return xxx_messageInfo_Session.Size(m)
}
func (m *Session) XXX_DiscardUnknown() {
	xxx_messageInfo_Session.DiscardUnknown(m)
}

var xxx_messageInfo_Session proto.InternalMessageInfo

func (m *Session) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type KeepAliveResponse struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Ttl                  int64    `protobuf:"varint,2,opt,name=ttl,proto3" json:"ttl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeepAliveResponse) Reset()         { *m = KeepAliveResponse{} }
func (m *KeepAliveResponse) String() string { return proto.CompactTextString(m) }
func (*KeepAliveResponse) ProtoMessage()    {}
func (*KeepAliveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b771d46e8b2ce71, []int{14}
}

func (m *KeepAliveResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeepAliveResponse.Unmarshal(m, b)
}
func (m *KeepAliveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeepAliveResponse.Marshal(b, m, deterministic)
}
func (m *KeepAliveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeepAliveResponse.Merge(m, src)
}
func (m *KeepAliveResponse) XXX_Size() int {
	return xxx_messageInfo_KeepAliveResponse.Size(m)
}
func (m *KeepAliveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_KeepAliveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_KeepAliveResponse proto.InternalMessageInfo

func (m *KeepAliveResponse) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *KeepAliveResponse) GetTtl() int64 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func init() {
	proto.RegisterType((*KafkaOffset)(nil), "rpc.KafkaOffset")
	proto.RegisterType((*BackfillCheckpoint)(nil), "rpc.BackfillCheckpoint")
	proto.RegisterType((*ArchiveVersion)(nil), "rpc.ArchiveVersion")
	proto.RegisterType((*SnapshotVersion)(nil), "rpc.SnapshotVersion")
	proto.RegisterType((*VectorPartyMetaData)(nil), "rpc.VectorPartyMetaData")
	proto.RegisterType((*BatchMetaData)(nil), "rpc.BatchMetaData")
	proto.RegisterType((*FactTableShardMetaData)(nil), "rpc.FactTableShardMetaData")
	proto.RegisterType((*DimensionTableShardMetaData)(nil), "rpc.DimensionTableShardMetaData")
	proto.RegisterType((*TableShardMetaData)(nil), "rpc.TableShardMetaData")
	proto.RegisterType((*TableShardMetaDataRequest)(nil), "rpc.TableShardMetaDataRequest")
	proto.RegisterType((*VectorPartyRawDataRequest)(nil), "rpc.VectorPartyRawDataRequest")
	proto.RegisterType((*VectorPartyRawData)(nil), "rpc.VectorPartyRawData")
	proto.RegisterType((*StartSessionRequest)(nil), "rpc.StartSessionRequest")
	proto.RegisterType((*Session)(nil), "rpc.Session")
	proto.RegisterType((*KeepAliveResponse)(nil), "rpc.KeepAliveResponse")
}

func init() { proto.RegisterFile("peer_streaming.proto", fileDescriptor_7b771d46e8b2ce71) }

var fileDescriptor_7b771d46e8b2ce71 = []byte{
	// 825 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xeb, 0x6a, 0xe3, 0x46,
	0x14, 0xd6, 0xc5, 0x97, 0xe4, 0xd8, 0x4e, 0xd2, 0x49, 0x48, 0x1c, 0x07, 0x82, 0x19, 0x4a, 0x31,
	0xa1, 0x84, 0xd4, 0xa5, 0xb4, 0xa5, 0xb4, 0x34, 0xae, 0x49, 0x1d, 0x42, 0xdb, 0x30, 0x0e, 0x29,
	0x2d, 0x2d, 0xcb, 0x58, 0x1e, 0x47, 0xc2, 0xb2, 0xa4, 0x8c, 0x26, 0x5e, 0x76, 0x5f, 0x60, 0x9f,
	0x64, 0xf7, 0xcf, 0xb2, 0xec, 0xb3, 0xec, 0x1b, 0x2d, 0x33, 0xba, 0xac, 0x64, 0xc9, 0xf9, 0x95,
	0xfd, 0xe7, 0xf9, 0xe6, 0x7c, 0x67, 0xbe, 0x73, 0x95, 0x61, 0x2f, 0x60, 0x8c, 0x3f, 0x0b, 0x05,
	0x67, 0x74, 0xe1, 0x78, 0x77, 0xa7, 0x01, 0xf7, 0x85, 0x8f, 0x4c, 0x1e, 0x58, 0xf8, 0x7f, 0x68,
	0x5c, 0xd1, 0xd9, 0x9c, 0xfe, 0x35, 0x9b, 0x85, 0x4c, 0xa0, 0x13, 0xd8, 0xb1, 0x6c, 0x66, 0xcd,
	0xaf, 0x7d, 0xc7, 0x13, 0x11, 0xd6, 0xd6, 0xbb, 0x7a, 0xcf, 0x24, 0x05, 0x1c, 0x61, 0x68, 0x5a,
	0xfe, 0x62, 0xe1, 0x24, 0x76, 0x86, 0xb2, 0xcb, 0x61, 0xf8, 0x3f, 0x40, 0x03, 0x6a, 0xcd, 0x67,
	0x8e, 0xeb, 0xfe, 0x26, 0xf9, 0x81, 0xe4, 0xa3, 0x63, 0x00, 0xce, 0xa6, 0xfe, 0x85, 0xe3, 0xb2,
	0xcb, 0x61, 0xec, 0x3f, 0x83, 0xa0, 0xaf, 0x60, 0x2b, 0x39, 0x65, 0x7c, 0xb7, 0xc8, 0x0a, 0x8a,
	0xff, 0x85, 0xad, 0x73, 0x6e, 0xd9, 0xce, 0x92, 0xdd, 0x32, 0x1e, 0x3a, 0xbe, 0x27, 0x99, 0x34,
	0x87, 0x28, 0xef, 0x2d, 0xb2, 0x82, 0xa2, 0x2e, 0x34, 0x26, 0xb1, 0xae, 0x31, 0xbb, 0x8f, 0xdd,
	0x67, 0x21, 0xfc, 0x0f, 0x6c, 0x8f, 0x3d, 0x1a, 0x84, 0xb6, 0x2f, 0x12, 0xd2, 0x53, 0xc9, 0xfe,
	0x06, 0x76, 0x6f, 0x99, 0x25, 0x7c, 0x7e, 0x4d, 0xb9, 0x78, 0xf1, 0x07, 0x13, 0x74, 0x48, 0x05,
	0x45, 0x1d, 0xd8, 0xb0, 0x7c, 0xf7, 0x61, 0xe1, 0xc5, 0xce, 0x5b, 0x24, 0x3d, 0xe3, 0x37, 0x3a,
	0xb4, 0x06, 0x54, 0x58, 0x76, 0x6a, 0xdd, 0x86, 0xfa, 0x44, 0x02, 0xb1, 0x71, 0x95, 0x24, 0x47,
	0x84, 0xa0, 0x12, 0x3a, 0x2f, 0x59, 0xfc, 0xb8, 0xfa, 0x8d, 0x7e, 0x2a, 0xe4, 0xc5, 0xec, 0xea,
	0xbd, 0x46, 0x7f, 0xf7, 0x94, 0x07, 0xd6, 0x69, 0x3e, 0x89, 0x85, 0x64, 0x9d, 0x80, 0xb9, 0x0c,
	0xc2, 0x76, 0xa5, 0x6b, 0xf6, 0x1a, 0xfd, 0xb6, 0x62, 0x94, 0xe8, 0x27, 0xd2, 0x08, 0xbf, 0xd2,
	0x61, 0xff, 0x82, 0x5a, 0xe2, 0x86, 0x4e, 0x5c, 0x36, 0xb6, 0x29, 0x9f, 0xa6, 0x8a, 0xbf, 0x84,
	0x96, 0xed, 0xdc, 0xd9, 0x7f, 0x53, 0xc1, 0xf8, 0x82, 0xf2, 0x79, 0x1c, 0x64, 0x1e, 0x44, 0xbf,
	0x03, 0x9a, 0x14, 0x3a, 0x46, 0xc5, 0xd2, 0xe8, 0x1f, 0xa8, 0xb7, 0x8b, 0x0d, 0x45, 0x4a, 0x28,
	0xf8, 0xb5, 0x0e, 0x47, 0x43, 0x67, 0xc1, 0x3c, 0x19, 0x43, 0x89, 0x9c, 0x5f, 0x60, 0x3b, 0xcc,
	0x17, 0x58, 0x09, 0x6a, 0xf4, 0xf7, 0xd4, 0x2b, 0x2b, 0xc5, 0x27, 0xab, 0xc6, 0xb2, 0x85, 0x5c,
	0x1a, 0x8a, 0x41, 0x5c, 0x04, 0x43, 0x15, 0x21, 0x0b, 0xc9, 0x80, 0xd3, 0xe3, 0x58, 0x56, 0xc4,
	0x54, 0x36, 0x79, 0x10, 0x7f, 0x30, 0x00, 0x95, 0xc8, 0xdb, 0x83, 0xaa, 0x90, 0xa8, 0x12, 0xb5,
	0x49, 0xa2, 0x83, 0x7c, 0xd4, 0xf1, 0x2c, 0xca, 0x3d, 0x2a, 0xa4, 0xe0, 0xf8, 0xd1, 0x0c, 0x24,
	0x79, 0xa1, 0x74, 0xa4, 0x1e, 0x6b, 0x91, 0xe8, 0x80, 0xfa, 0xd0, 0x98, 0x7f, 0x1a, 0xf3, 0x76,
	0x45, 0x05, 0xba, 0xa3, 0x02, 0xcd, 0x8c, 0x3f, 0xc9, 0x1a, 0xa1, 0x1f, 0x61, 0x63, 0x46, 0x2d,
	0x21, 0x15, 0xb5, 0xab, 0x8a, 0x70, 0xa4, 0x08, 0xe5, 0xe5, 0x1d, 0x69, 0x24, 0x35, 0x47, 0x23,
	0x68, 0x4d, 0x93, 0xd4, 0x2b, 0x7e, 0x4d, 0xf1, 0xbb, 0x8a, 0xff, 0x48, 0x51, 0x46, 0x1a, 0xc9,
	0x13, 0xd1, 0xd7, 0x71, 0x9b, 0xb3, 0xb0, 0x5d, 0x57, 0xfd, 0x87, 0xe2, 0x1e, 0xc8, 0xcc, 0x02,
	0x49, 0x4c, 0x06, 0x35, 0xa8, 0x2c, 0x98, 0xa0, 0xf8, 0x9d, 0x0e, 0x87, 0x45, 0xef, 0x84, 0xdd,
	0x3f, 0xb0, 0x50, 0x3c, 0x71, 0x6a, 0x31, 0x34, 0x43, 0x41, 0x79, 0xda, 0x08, 0x15, 0x45, 0xcc,
	0x61, 0x72, 0x73, 0x30, 0x6f, 0x9a, 0x58, 0x54, 0x95, 0x45, 0x06, 0xc1, 0x6f, 0x0d, 0x38, 0xcc,
	0x8c, 0x14, 0xa1, 0xcf, 0x3f, 0x9f, 0xde, 0xcc, 0xe2, 0xa8, 0xe4, 0x17, 0xc7, 0xcf, 0x85, 0x25,
	0x51, 0x5d, 0xbb, 0x24, 0x46, 0x5a, 0x61, 0x4d, 0xfc, 0x5a, 0x1c, 0xa8, 0xda, 0xfa, 0x81, 0x1a,
	0x69, 0xc5, 0x91, 0xca, 0x6e, 0xc0, 0x7a, 0x7e, 0x03, 0x0e, 0x36, 0xa1, 0xbe, 0x8c, 0xcc, 0xf0,
	0x09, 0xa0, 0x62, 0xb2, 0x64, 0xb4, 0x96, 0xfd, 0xe0, 0x45, 0x6b, 0xa5, 0x49, 0xa2, 0x03, 0x1e,
	0xc3, 0xee, 0x58, 0x56, 0x62, 0xcc, 0x42, 0x35, 0xc6, 0x8f, 0xa6, 0x34, 0x4d, 0x98, 0x91, 0x4d,
	0xd8, 0x0e, 0x98, 0x42, 0xb8, 0x2a, 0x89, 0x26, 0x91, 0x3f, 0xf1, 0x21, 0xd4, 0x63, 0x7f, 0x68,
	0x0b, 0x8c, 0xf4, 0x5b, 0x60, 0x5c, 0x0e, 0xf1, 0x77, 0xf0, 0xc5, 0x15, 0x63, 0xc1, 0xb9, 0xeb,
	0x2c, 0x19, 0x61, 0x61, 0xe0, 0x7b, 0x21, 0x5b, 0x35, 0x4a, 0x3c, 0x1a, 0xa9, 0xc7, 0xfe, 0x7b,
	0x03, 0x9a, 0xd7, 0x8c, 0x71, 0x19, 0xc9, 0x9f, 0xfe, 0x94, 0xa1, 0x1f, 0xa0, 0x99, 0xd5, 0x8d,
	0xa2, 0xb5, 0x5b, 0x12, 0x4a, 0xa7, 0x19, 0xdd, 0x44, 0x20, 0xd6, 0xd0, 0xf7, 0xb0, 0x99, 0x2a,
	0x40, 0xb9, 0xcb, 0xce, 0x7e, 0x34, 0xf0, 0xab, 0xfa, 0xb0, 0xd6, 0xd3, 0xcf, 0x74, 0x74, 0x03,
	0x07, 0x17, 0x4c, 0x58, 0x76, 0xc9, 0x32, 0x3a, 0x56, 0xc4, 0xb5, 0x13, 0xd5, 0x39, 0x58, 0x73,
	0x8f, 0x35, 0x74, 0x1b, 0x7b, 0x2d, 0xa9, 0xd8, 0xf1, 0xea, 0xa7, 0x24, 0xdf, 0xf7, 0xb1, 0xd7,
	0xe2, 0x3d, 0xd6, 0xce, 0xf4, 0x49, 0x4d, 0xfd, 0x89, 0xf9, 0xf6, 0x63, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x8f, 0x7f, 0x69, 0x78, 0xdc, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PeerDataNodeClient is the client API for PeerDataNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PeerDataNodeClient interface {
	// StartSession starts a session for data streaming
	StartSession(ctx context.Context, in *StartSessionRequest, opts ...grpc.CallOption) (*Session, error)
	// KeepAlive sends keep alive message to the peer data service to
	// renew session and get new ttl for the session
	KeepAlive(ctx context.Context, opts ...grpc.CallOption) (PeerDataNode_KeepAliveClient, error)
	// FetchTableShardMetaData fetches metadata for given table shard
	FetchTableShardMetaData(ctx context.Context, in *TableShardMetaDataRequest, opts ...grpc.CallOption) (*TableShardMetaData, error)
	// FetchVectorPartyRawData fetches raw data for specified vector party
	FetchVectorPartyRawData(ctx context.Context, in *VectorPartyRawDataRequest, opts ...grpc.CallOption) (PeerDataNode_FetchVectorPartyRawDataClient, error)
}

type peerDataNodeClient struct {
	cc *grpc.ClientConn
}

func NewPeerDataNodeClient(cc *grpc.ClientConn) PeerDataNodeClient {
	return &peerDataNodeClient{cc}
}

func (c *peerDataNodeClient) StartSession(ctx context.Context, in *StartSessionRequest, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, "/rpc.PeerDataNode/StartSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerDataNodeClient) KeepAlive(ctx context.Context, opts ...grpc.CallOption) (PeerDataNode_KeepAliveClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PeerDataNode_serviceDesc.Streams[0], "/rpc.PeerDataNode/KeepAlive", opts...)
	if err != nil {
		return nil, err
	}
	x := &peerDataNodeKeepAliveClient{stream}
	return x, nil
}

type PeerDataNode_KeepAliveClient interface {
	Send(*Session) error
	Recv() (*KeepAliveResponse, error)
	grpc.ClientStream
}

type peerDataNodeKeepAliveClient struct {
	grpc.ClientStream
}

func (x *peerDataNodeKeepAliveClient) Send(m *Session) error {
	return x.ClientStream.SendMsg(m)
}

func (x *peerDataNodeKeepAliveClient) Recv() (*KeepAliveResponse, error) {
	m := new(KeepAliveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *peerDataNodeClient) FetchTableShardMetaData(ctx context.Context, in *TableShardMetaDataRequest, opts ...grpc.CallOption) (*TableShardMetaData, error) {
	out := new(TableShardMetaData)
	err := c.cc.Invoke(ctx, "/rpc.PeerDataNode/FetchTableShardMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerDataNodeClient) FetchVectorPartyRawData(ctx context.Context, in *VectorPartyRawDataRequest, opts ...grpc.CallOption) (PeerDataNode_FetchVectorPartyRawDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PeerDataNode_serviceDesc.Streams[1], "/rpc.PeerDataNode/FetchVectorPartyRawData", opts...)
	if err != nil {
		return nil, err
	}
	x := &peerDataNodeFetchVectorPartyRawDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PeerDataNode_FetchVectorPartyRawDataClient interface {
	Recv() (*VectorPartyRawData, error)
	grpc.ClientStream
}

type peerDataNodeFetchVectorPartyRawDataClient struct {
	grpc.ClientStream
}

func (x *peerDataNodeFetchVectorPartyRawDataClient) Recv() (*VectorPartyRawData, error) {
	m := new(VectorPartyRawData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PeerDataNodeServer is the server API for PeerDataNode service.
type PeerDataNodeServer interface {
	// StartSession starts a session for data streaming
	StartSession(context.Context, *StartSessionRequest) (*Session, error)
	// KeepAlive sends keep alive message to the peer data service to
	// renew session and get new ttl for the session
	KeepAlive(PeerDataNode_KeepAliveServer) error
	// FetchTableShardMetaData fetches metadata for given table shard
	FetchTableShardMetaData(context.Context, *TableShardMetaDataRequest) (*TableShardMetaData, error)
	// FetchVectorPartyRawData fetches raw data for specified vector party
	FetchVectorPartyRawData(*VectorPartyRawDataRequest, PeerDataNode_FetchVectorPartyRawDataServer) error
}

func RegisterPeerDataNodeServer(s *grpc.Server, srv PeerDataNodeServer) {
	s.RegisterService(&_PeerDataNode_serviceDesc, srv)
}

func _PeerDataNode_StartSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerDataNodeServer).StartSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.PeerDataNode/StartSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerDataNodeServer).StartSession(ctx, req.(*StartSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerDataNode_KeepAlive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PeerDataNodeServer).KeepAlive(&peerDataNodeKeepAliveServer{stream})
}

type PeerDataNode_KeepAliveServer interface {
	Send(*KeepAliveResponse) error
	Recv() (*Session, error)
	grpc.ServerStream
}

type peerDataNodeKeepAliveServer struct {
	grpc.ServerStream
}

func (x *peerDataNodeKeepAliveServer) Send(m *KeepAliveResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *peerDataNodeKeepAliveServer) Recv() (*Session, error) {
	m := new(Session)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PeerDataNode_FetchTableShardMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableShardMetaDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerDataNodeServer).FetchTableShardMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.PeerDataNode/FetchTableShardMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerDataNodeServer).FetchTableShardMetaData(ctx, req.(*TableShardMetaDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerDataNode_FetchVectorPartyRawData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VectorPartyRawDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PeerDataNodeServer).FetchVectorPartyRawData(m, &peerDataNodeFetchVectorPartyRawDataServer{stream})
}

type PeerDataNode_FetchVectorPartyRawDataServer interface {
	Send(*VectorPartyRawData) error
	grpc.ServerStream
}

type peerDataNodeFetchVectorPartyRawDataServer struct {
	grpc.ServerStream
}

func (x *peerDataNodeFetchVectorPartyRawDataServer) Send(m *VectorPartyRawData) error {
	return x.ServerStream.SendMsg(m)
}

var _PeerDataNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.PeerDataNode",
	HandlerType: (*PeerDataNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartSession",
			Handler:    _PeerDataNode_StartSession_Handler,
		},
		{
			MethodName: "FetchTableShardMetaData",
			Handler:    _PeerDataNode_FetchTableShardMetaData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "KeepAlive",
			Handler:       _PeerDataNode_KeepAlive_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "FetchVectorPartyRawData",
			Handler:       _PeerDataNode_FetchVectorPartyRawData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "peer_streaming.proto",
}
