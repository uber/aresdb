// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import common "github.com/uber/aresdb/memstore/common"
import mock "github.com/stretchr/testify/mock"
import redolog "github.com/uber/aresdb/redolog"

// RedologManager is an autogenerated mock type for the RedologManager type
type RedologManager struct {
	mock.Mock
}

// AppendToRedoLog provides a mock function with given fields: upsertBatch
func (_m *RedologManager) AppendToRedoLog(upsertBatch *common.UpsertBatch) (int64, uint32) {
	ret := _m.Called(upsertBatch)

	var r0 int64
	if rf, ok := ret.Get(0).(func(*common.UpsertBatch) int64); ok {
		r0 = rf(upsertBatch)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 uint32
	if rf, ok := ret.Get(1).(func(*common.UpsertBatch) uint32); ok {
		r1 = rf(upsertBatch)
	} else {
		r1 = ret.Get(1).(uint32)
	}

	return r0, r1
}

// CheckpointRedolog provides a mock function with given fields: cutoff, redoFileCheckpointed, batchOffset
func (_m *RedologManager) CheckpointRedolog(cutoff uint32, redoFileCheckpointed int64, batchOffset uint32) error {
	ret := _m.Called(cutoff, redoFileCheckpointed, batchOffset)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint32, int64, uint32) error); ok {
		r0 = rf(cutoff, redoFileCheckpointed, batchOffset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *RedologManager) Close() {
	_m.Called()
}

// GetBatchReceived provides a mock function with given fields:
func (_m *RedologManager) GetBatchReceived() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetBatchRecovered provides a mock function with given fields:
func (_m *RedologManager) GetBatchRecovered() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetNumFiles provides a mock function with given fields:
func (_m *RedologManager) GetNumFiles() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetTotalSize provides a mock function with given fields:
func (_m *RedologManager) GetTotalSize() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// IsAppendEnabled provides a mock function with given fields:
func (_m *RedologManager) IsAppendEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Iterator provides a mock function with given fields:
func (_m *RedologManager) Iterator() (redolog.NextUpsertFunc, error) {
	ret := _m.Called()

	var r0 redolog.NextUpsertFunc
	if rf, ok := ret.Get(0).(func() redolog.NextUpsertFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(redolog.NextUpsertFunc)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMaxEventTime provides a mock function with given fields: eventTime, redoFile
func (_m *RedologManager) UpdateMaxEventTime(eventTime uint32, redoFile int64) {
	_m.Called(eventTime, redoFile)
}

// WaitForRecoveryDone provides a mock function with given fields:
func (_m *RedologManager) WaitForRecoveryDone() {
	_m.Called()
}
